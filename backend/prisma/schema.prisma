generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model courseClasses {
  courseId       Int           @map("course_id")
  classId        Int           @map("class_id")
  school_classes schoolClasses @relation("course_classesToschool_classes", fields: [classId], references: [school_class_id], onUpdate: Restrict, map: "fk_course_classes_class_id")
  courses        courses       @relation(fields: [courseId], references: [courseId], onUpdate: Restrict, map: "fk_course_classes_course_id")

  @@id([courseId, classId])
  @@index([classId], map: "fk_course_classes_class_id")
  @@map("course_classes")
}

model departments {
  deparmentId            Int             @id @default(autoincrement()) @map("deparment_id")
  deparmentUUID          String          @map("deparment_uuid") @db.VarChar(255)
  deparmentName          String          @map("deparment_name") @db.VarChar(255)
  schoolId               Int             @map("school_id")
  deparmentIsVisible     Boolean         @map("deparment_is_visible")
  deparmentChildsVisible Boolean         @map("deparment_childs_visible")
  schools                schools         @relation(fields: [schoolId], references: [schoolId], onUpdate: Restrict, map: "fk_departments_school_id")
  schoolClass            schoolClasses[] @relation("departmentsToschoolClasses")
  schoolClasses          schoolClasses[]
  schoolClasses          schoolClasses[]

  @@index([schoolId], map: "fk_departments_school_id")
}

model languages {
  languageId   Int    @id @default(autoincrement()) @map("language_id")
  languageName String @map("language_name") @db.VarChar(255)
  languageTag  String @map("language_tag") @db.VarChar(255)
}

model updateEmailReceivers {
  updateEmailReceiverId    Int    @id @default(autoincrement()) @map("update_email_receiver_id")
  userId                   Int    @map("user_id")
  updateEmailReceiverEmail String @map("update_email_receiver_email") @db.VarChar(255)
  users                    users  @relation("updateEmailReceiversTousers", fields: [userId], references: [userId], onUpdate: Restrict, map: "fk_update_email_receiver_user_id")

  @@index([userId], map: "fk_update_email_receiver_user_id")
  @@map("update_email_receivers")
}

model schoolClasses {
  school_class_id            Int              @id @default(autoincrement())
  school_class_uuid          String           @db.VarChar(255)
  school_class_department_id Int
  school_class_name          Int
  departments                departments      @relation("departmentsToschool_classes", fields: [school_class_department_id], references: [deparmentId], onUpdate: Restrict, map: "fk_school_class_department_id")
  courseClasses              courseClasses[]  @relation("course_classesToschool_classes")
  schoolSubjects             schoolSubjects[] @relation("school_classesToschool_subjects")
  departmentsDeparmentId     Int?
  departments                departments?     @relation(fields: [departmentsDeparmentId], references: [deparmentId])
  departments                departments?     @relation(fields: [departmentsDeparmentId], references: [deparmentId])

  @@index([school_class_department_id], map: "fk_school_class_department_id")
  @@map("school_classes")
}

model schools {
  schoolId                  Int               @id @default(autoincrement()) @map("school_id")
  schoolUUID                String            @map("school_uuid") @db.VarChar(255)
  school_name               String            @db.VarChar(255)
  school_description        String            @db.Text
  school_language_id        Int
  school_timezone           String            @db.VarChar(255)
  school_creation_timestamp DateTime          @default(now()) @db.Timestamp(0)
  school_creator_id         Int
  users                     users             @relation(fields: [school_creator_id], references: [userId], onUpdate: Restrict, map: "fk_school_creator_id")
  courses                   courses[]
  departments               departments[]
  schoolJoinCodes           schoolJoinCodes[]
  schoolUserRoles           schoolUserRoles[]
  schoolUsers               schoolUsers[]

  @@index([school_creator_id], map: "fk_school_creator_id")
}

model courses {
  courseId                   Int                          @id @default(autoincrement()) @map("course_id")
  courseUUID                 String                       @map("course_uuid") @db.VarChar(255)
  course_name                String                       @db.VarChar(255)
  courseDescription          String                       @map("course_description") @db.Text
  course_school_id           Int
  course_subject_id          Int
  course_creation_timestamp  DateTime                     @default(now()) @db.Timestamp(0)
  course_creator_id          Int
  users                      users                        @relation(fields: [course_creator_id], references: [userId], onUpdate: Restrict, map: "fk_courses_creator_id")
  schools                    schools                      @relation(fields: [course_school_id], references: [schoolId], onUpdate: Restrict, map: "fk_courses_school_id")
  school_subjects            schoolSubjects               @relation(fields: [course_subject_id], references: [school_subject_id], onUpdate: Restrict, map: "fk_courses_subject_id")
  courseClasses              courseClasses[]
  courseElementTextSettings  courseElementTextSettings[]
  courseElements             courseElements[]             @relation("course_elementsTocourses")
  courseFileSubmissionGrades courseFileSubmissionGrades[]
  courseUsers                courseUsers[]

  @@index([course_creator_id], map: "fk_courses_creator_id")
  @@index([course_school_id], map: "fk_courses_school_id")
  @@index([course_subject_id], map: "fk_courses_subject_id")
}

model schoolJoinCodes {
  schoolJoinCodeId                    Int       @id @default(autoincrement()) @map("school_join_code_id")
  schoolId                            Int       @map("school_id")
  school_join_code                    String    @db.VarChar(255)
  school_join_code_expire_timestamp   DateTime? @db.Timestamp(0)
  school_join_code_name               String    @db.VarChar(255)
  school_join_code_creator_id         Int
  school_join_code_creation_timestamp DateTime  @default(now()) @db.Timestamp(0)
  schools                             schools   @relation(fields: [schoolId], references: [schoolId], onUpdate: Restrict, map: "fk_school_join_code_school_id")
  users                               users     @relation("school_join_codesTousers", fields: [school_join_code_creator_id], references: [userId], onUpdate: Restrict, map: "fk_school_join_code_creator_id")
  usersUserId                         Int?
  users                               users?    @relation(fields: [usersUserId], references: [userId])

  @@index([school_join_code_creator_id], map: "fk_school_join_code_creator_id")
  @@index([schoolId], map: "fk_school_join_code_school_id")
  @@map("school_join_codes")
}

model courseFiles {
  courseFileId                 Int      @id @default(autoincrement()) @map("course_file_id")
  courseFileUUID               String   @map("course_file_uuid") @db.VarChar(255)
  course_file_name             String   @db.VarChar(255)
  course_file_upload_timestamp DateTime @default(now()) @db.Timestamp(0)
  course_file_size             BigInt
  course_file_type             String   @db.VarChar(255)

  @@map("course_files")
}

model timezones {
  timezoneId   Int    @id @default(autoincrement()) @map("timezone_id")
  timezoneUUID String @map("timezone_uuid") @db.VarChar(255)
  timezoneName String @map("timezone_name") @db.VarChar(255)
}

model courseElements {
  course_element_id                 Int                             @id @default(autoincrement())
  course_element_uuid               String                          @db.VarChar(255)
  course_element_type_id            Int
  course_element_parent_id          Int
  course_element_is_visible         Boolean
  course_element_weight             Int
  course_element_order              Int
  course_element_creator_id         Int
  course_element_course_id          Int
  course_element_creation_timestamp DateTime                        @default(now()) @db.Timestamp(0)
  courses                           courses                         @relation("course_elementsTocourses", fields: [course_element_course_id], references: [courseId], onUpdate: Restrict, map: "fk_course_elements_course_id")
  users                             users                           @relation("course_elementsTousers", fields: [course_element_creator_id], references: [userId], onUpdate: Restrict, map: "fk_course_elements_creator_id")
  course_elements                   courseElements                  @relation("course_elementsTocourse_elements_course_element_parent_id", fields: [course_element_parent_id], references: [course_element_id], onUpdate: Restrict, map: "fk_course_elements_parent_id")
  courseElementHeadlineSettings     courseElementHeadlineSettings[] @relation("course_element_headline_settingsTocourse_elements")
  other_course_elements             courseElements[]                @relation("course_elementsTocourse_elements_course_element_parent_id")
  courseFileSubmissionSettings      courseFileSubmissionSettings[]  @relation("course_elementsTocourse_file_submission_settings")
  courseFileSubmissions             courseFileSubmissions[]         @relation("course_elementsTocourse_file_submissions")
  usersUserId                       Int?
  users                             users?                          @relation(fields: [usersUserId], references: [userId])

  @@index([course_element_course_id], map: "fk_course_elements_course_id")
  @@index([course_element_creator_id], map: "fk_course_elements_creator_id")
  @@index([course_element_parent_id], map: "fk_course_elements_parent_id")
  @@map("course_elements")
}

model articles {
  articleId                  Int      @id @default(autoincrement()) @map("article_id")
  articleUUID                String   @map("article_uuid") @db.VarChar(255)
  article_headline           String   @db.Text
  article_catch_phrase       String   @db.Text
  article_content            String   @db.Text
  article_type               Int
  article_is_public          Boolean
  article_publish_timestamp  DateTime @default(now()) @db.Timestamp(0)
  article_creation_timestamp DateTime @default(now()) @db.Timestamp(0)
  article_creator_id         Int
  users                      users    @relation(fields: [article_creator_id], references: [userId], onUpdate: Restrict, map: "fk_articles_creator_id")

  @@index([article_creator_id], map: "fk_articles_creator_id")
}

model courseElementHeadlineSettings {
  course_element_headline_id         Int            @id @default(autoincrement())
  course_element_headline_element_id Int
  course_element_headline_label      String         @db.VarChar(255)
  course_elements                    courseElements @relation("course_element_headline_settingsTocourse_elements", fields: [course_element_headline_element_id], references: [course_element_id], onUpdate: Restrict, map: "fk_course_element_headline_element_id")

  @@index([course_element_headline_element_id], map: "fk_course_element_headline_element_id")
  @@map("course_element_headline_settings")
}

model courseElementTextSettings {
  course_element_text_setting_id Int     @id @default(autoincrement())
  course_element_id              Int
  course_element_text_text       String  @db.Text
  courses                        courses @relation(fields: [course_element_id], references: [courseId], onUpdate: Restrict, map: "fk_course_element_text_setting_course_element_id")

  @@index([course_element_id], map: "fk_course_element_text_setting_course_element_id")
  @@map("course_element_text_settings")
}

model courseFileSubmissionGrades {
  course_file_submission_grade_id                                                    Int      @id @default(autoincrement())
  course_element_id                                                                  Int
  user_id                                                                            Int
  course_file_submission_grade                                                       Int
  course_file_submission_grade_notes                                                 String   @db.VarChar(255)
  course_file_submission_grade_creation_timestamp                                    DateTime @default(now()) @db.Timestamp(0)
  course_file_submission_grade_creator_id                                            Int
  courses                                                                            courses  @relation(fields: [course_element_id], references: [courseId], onUpdate: Restrict, map: "fk_course_file_submission_grade_course_element_id")
  users_course_file_submission_grades_course_file_submission_grade_creator_idTousers users    @relation("course_file_submission_grades_course_file_submission_grade_creator_idTousers", fields: [course_file_submission_grade_creator_id], references: [userId], onUpdate: Restrict, map: "fk_course_file_submission_grade_creator_id")
  users_course_file_submission_grades_user_idTousers                                 users    @relation("course_file_submission_grades_user_idTousers", fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_course_file_submission_grade_user_id")
  users                                                                              users?   @relation(fields: [usersUserId], references: [userId])
  usersUserId                                                                        Int?
  users                                                                              users?   @relation(fields: [usersUserId], references: [userId])
  users                                                                              users?   @relation(fields: [usersUserId], references: [userId])

  @@index([course_element_id], map: "fk_course_file_submission_grade_course_element_id")
  @@index([course_file_submission_grade_creator_id], map: "fk_course_file_submission_grade_creator_id")
  @@index([user_id], map: "fk_course_file_submission_grade_user_id")
  @@map("course_file_submission_grades")
}

model courseFileSubmissionSettings {
  course_file_submission_setting_id             Int            @id @default(autoincrement())
  course_file_submission_element_id             Int
  course_file_submission_name                   String         @db.Text
  course_file_submission_description            Int
  course_file_submission_due_timestamp          DateTime?      @db.Timestamp(0)
  course_file_submission_submit_later           Boolean
  course_file_submission_submit_later_timestamp DateTime?      @db.Timestamp(0)
  course_file_submission_max_file_size          Float          @db.Float
  course_file_submission_allowed_file_types     String         @db.VarChar(255)
  course_elements                               courseElements @relation("course_elementsTocourse_file_submission_settings", fields: [course_file_submission_element_id], references: [course_element_id], onUpdate: Restrict, map: "course_file_submission_settings_element_id")

  @@index([course_file_submission_element_id], map: "course_file_submission_settings_element_id")
  @@map("course_file_submission_settings")
}

model courseFileSubmissions {
  course_file_submission_id                Int            @id @default(autoincrement())
  course_file_submission_element_id        Int
  user_id                                  Int
  course_file_submission_file_name         String         @db.VarChar(255)
  course_file_submission_original_name     String         @db.VarChar(255)
  course_file_submission_file_size         Int
  course_file_submission_file_type         String         @db.VarChar(255)
  course_file_submission_upload_timestamp  DateTime       @default(now()) @db.Timestamp(0)
  course_file_submission_is_submitted_late Boolean
  course_elements                          courseElements @relation("course_elementsTocourse_file_submissions", fields: [course_file_submission_element_id], references: [course_element_id], onUpdate: Restrict, map: "fk_course_file_submission_element_id")
  users                                    users          @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_course_file_submission_user_id")

  @@index([course_file_submission_element_id], map: "fk_course_file_submission_element_id")
  @@index([user_id], map: "fk_course_file_submission_user_id")
  @@map("course_file_submissions")
}

model courseUsers {
  course_id Int
  user_id   Int
  courses   courses @relation(fields: [course_id], references: [courseId], onUpdate: Restrict, map: "fk_course_users_course_id")
  users     users   @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_course_users_user_id")

  @@id([course_id, user_id])
  @@index([user_id], map: "fk_course_users_user_id")
  @@map("course_users")
}

model logEmails {
  log_email_id        Int      @id @default(autoincrement())
  log_email_uuid      String   @db.VarChar(255)
  user_id             Int
  log_email_timestamp DateTime @default(now()) @db.Timestamp(0)
  log_email_subject   String   @db.VarChar(255)
  log_email_receiver  String   @db.VarChar(255)
  users               users    @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_log_emails_user_id")

  @@index([user_id], map: "fk_log_emails_user_id")
  @@map("log_emails")
}

model logRequests {
  log_request_id             Int      @id @default(autoincrement())
  log_request_ip_adress      String   @db.VarChar(255)
  log_request_timestamp      DateTime @default(now()) @db.Timestamp(0)
  log_request_method         String   @db.VarChar(255)
  log_request_path           String   @db.VarChar(3000)
  log_request_status_code    Int
  log_request_content_length Int
  log_request_user_agent     String   @db.VarChar(255)
  log_request_response_time  Float    @db.Float

  @@map("log_requests")
}

model schoolRoles {
  school_role_id   Int               @id @default(autoincrement())
  school_role_name String            @db.VarChar(255)
  schoolUserRoles  schoolUserRoles[]

  @@map("school_roles")
}

model schoolSubjects {
  school_subject_id       Int           @id @default(autoincrement())
  school_subject_name     String        @db.VarChar(255)
  school_subject_class_id Int
  school_classes          schoolClasses @relation("school_classesToschool_subjects", fields: [school_subject_class_id], references: [school_class_id], onUpdate: Restrict, map: "fk_school_subject_class_id")
  courses                 courses[]

  @@index([school_subject_class_id], map: "fk_school_subject_class_id")
  @@map("school_subjects")
}

model schoolUserRoles {
  user_id        Int
  school_role_id Int
  school_id      Int
  schools        schools     @relation(fields: [school_id], references: [schoolId], onUpdate: Restrict, map: "fk_school_user_role_school_id")
  schoolRoles    schoolRoles @relation(fields: [school_role_id], references: [school_role_id], onUpdate: Restrict, map: "fk_school_user_school_role_id")
  users          users       @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_school_user_role_user_id")

  @@id([user_id, school_role_id, school_id])
  @@index([school_id], map: "fk_school_user_role_school_id")
  @@index([school_role_id], map: "fk_school_user_school_role_id")
  @@map("school_user_roles")
}

model schoolUsers {
  school_user_id Int
  school_id      Int
  schools        schools @relation(fields: [school_id], references: [schoolId], onUpdate: Restrict, map: "fk_school_users_school_id")
  users          users   @relation(fields: [school_user_id], references: [userId], onUpdate: Restrict, map: "fk_school_users_user_id")

  @@id([school_user_id, school_id])
  @@index([school_id], map: "fk_school_users_school_id")
  @@map("school_users")
}

model userBadges {
  user_badge_id               Int       @id @default(autoincrement())
  user_id                     Int
  badge_id                    Int
  user_badge_issue_timestamp  DateTime  @default(now()) @db.Timestamp(0)
  user_badge_expire_timestamp DateTime? @db.Timestamp(0)
  user_badge_issuer_id        Int
  users                       users     @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "user_badge_issuer_id")

  @@index([user_id], map: "user_badge_issuer_id")
  @@map("user_badges")
}

model userEmailChangeTokens {
  email_change_token_id                 Int      @id @default(autoincrement())
  user_id                               Int
  email_change_token                    String   @db.VarChar(255)
  email_change_token_new_email          String   @db.VarChar(255)
  email_change_token_verified           Boolean
  email_change_token_creation_timestamp DateTime @default(now()) @db.Timestamp(0)
  email_change_token_expire_timestamp   DateTime @default(now()) @db.Timestamp(0)
  users                                 users    @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_user_email_change_tokens_user_id")

  @@index([user_id], map: "fk_user_email_change_tokens_user_id")
  @@map("user_email_change_tokens")
}

model userLoginTokens {
  user_login_token_id                 Int      @id @default(autoincrement())
  user_id                             Int
  refresh_token                       Int
  user_login_token_creation_timestamp DateTime @default(now()) @db.Timestamp(0)
  user_login_token_expire_timestamp   DateTime @default(now()) @db.Timestamp(0)
  users                               users    @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "user_login_token_user_id")

  @@index([user_id], map: "user_login_token_user_id")
  @@map("user_login_tokens")
}

model userPasswordResetTokens {
  user_password_reset_token_id                 Int      @id @default(autoincrement())
  user_id                                      Int
  user_password_reset_token                    String   @db.VarChar(255)
  user_password_reset_token_creation_timestamp DateTime @default(now()) @db.Timestamp(0)
  user_password_reset_token_expire_timestamp   DateTime @default(now()) @db.Timestamp(0)
  users                                        users    @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_user_password_reset_token_user_id")

  @@index([user_id], map: "fk_user_password_reset_token_user_id")
  @@map("user_password_reset_tokens")
}

model userPublicProfileSettings {
  user_public_profile_setting_id                     Int     @id @default(autoincrement())
  user_id                                            Int
  user_public_profile_display_name                   String  @db.VarChar(255)
  user_public_profile_setting_public_email           String  @db.VarChar(255)
  user_public_profile_setting_biography              String  @db.Text
  user_public_profile_setting_location               String  @db.VarChar(255)
  user_public_profile_setting_preferred_languiage_id Int
  user_public_profile_setting_show_age               Boolean
  user_public_profile_setting_show_join_date         Boolean
  user_public_profile_setting_show_badges            Boolean
  users                                              users   @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_user_public_profile_setting_user_id")

  @@index([user_id], map: "fk_user_public_profile_setting_user_id")
  @@map("user_public_profile_settings")
}

model userRegisterTokens {
  user_register_token_id Int    @id @default(autoincrement())
  user_id                Int
  user_register_token    String @db.VarChar(255)
  users                  users  @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_user_register_token_user_id")

  @@index([user_id], map: "fk_user_register_token_user_id")
  @@map("user_register_tokens")
}

model userSettings {
  user_setting_id                    Int     @id @default(autoincrement())
  user_id                            Int
  user_setting_language_id           Int
  user_setting_time_zone             String  @db.VarChar(255)
  user_setting_date_time_format      String  @db.VarChar(255)
  user_setting_receive_update_emails Boolean
  user_setting_avatar_uuid           String  @db.VarChar(255)
  user_setting_phone_number          String  @db.VarChar(255)
  user_setting_theme_mode            Int
  user_setting_theme                 Int
  users                              users   @relation(fields: [user_id], references: [userId], onUpdate: Restrict, map: "fk_user_setting_user_id")

  @@index([user_id], map: "fk_user_setting_user_id")
  @@map("user_settings")
}

model users {
  userId                                                                                        Int                          @id @default(autoincrement()) @map("user_id")
  userUUID                                                                                      String                       @map("user_uuid") @db.VarChar(255)
  userFirstname                                                                                 String                       @map("user_firstname") @db.VarChar(255)
  userLastname                                                                                  String                       @map("user_lastname") @db.VarChar(255)
  userBirthDate                                                                                 DateTime                     @map("user_birth_date") @db.Date
  userEmail                                                                                     String                       @map("user_email") @db.VarChar(255)
  userPassword                                                                                  String                       @map("user_password") @db.VarChar(255)
  userEmailVerified                                                                             Boolean                      @map("user_email_verified")
  userCreationTimestamp                                                                         DateTime                     @default(now()) @map("user_creation_timestamp") @db.Timestamp(0)
  userLastLoginTimestamp                                                                        DateTime?                    @default(now()) @map("user_last_login_timestamp") @db.Timestamp(0)
  articles                                                                                      articles[]
  courseElements                                                                                courseElements[]             @relation("courseElementsTousers")
  courseFileSubmissionGradesCourseFileSubmissionGradesCourseFileSubmissionGradeCreatorIdTousers courseFileSubmissionGrades[] @relation("courseFileSubmissionGradesCourseFileSubmissionGradeCreatorIdTousers")
  courseFileSubmissionGradesCourseFileSubmissionGradesUserIdTousers                             courseFileSubmissionGrades[] @relation("courseFileSubmissionGradesUserIdTousers")
  courseFileSubmissions                                                                         courseFileSubmissions[]
  courseUsers                                                                                   courseUsers[]
  courses                                                                                       courses[]
  logEmails                                                                                     logEmails[]
  schoolJoinCodes                                                                               schoolJoinCodes[]            @relation("schoolJoinCodesTousers")
  schoolUserRoles                                                                               schoolUserRoles[]
  schoolUsers                                                                                   schoolUsers[]
  schools                                                                                       schools[]
  updateEmailReceivers                                                                          updateEmailReceivers[]       @relation("updateEmailReceiversTousers")
  userBadges                                                                                    userBadges[]
  userEmailChangeTokens                                                                         userEmailChangeTokens[]
  userLoginTokens                                                                               userLoginTokens[]
  userPasswordResetTokens                                                                       userPasswordResetTokens[]
  userPublicProfileSettings                                                                     userPublicProfileSettings[]
  userRegisterTokens                                                                            userRegisterTokens[]
  userSettings                                                                                  userSettings[]
  courseFileSubmissionGrades                                                                    courseFileSubmissionGrades[]
  schoolJoinCodes                                                                               schoolJoinCodes[]
  courseElements                                                                                courseElements[]
  courseFileSubmissionGrades                                                                    courseFileSubmissionGrades[]
  courseFileSubmissionGrades                                                                    courseFileSubmissionGrades[]
}
