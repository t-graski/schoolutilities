/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * SchoolUtilities API
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  Article,
  AddArticleDTO,
  UpdateArticleDTO,
  DeleteArticleDTO,
} from "../../backend/src/model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Get one article
 */
export const articleControllerGetArticle = (
  articleUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Article>> => {
  return axios.get(`/api/articles/article/${articleUUID}`, options);
};

export const getArticleControllerGetArticleQueryKey = (articleUUID: string) => [
  `/api/articles/article/${articleUUID}`,
];

export type ArticleControllerGetArticleQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerGetArticle>>
>;
export type ArticleControllerGetArticleQueryError = AxiosError<unknown>;

export const useArticleControllerGetArticle = <
  TData = Awaited<ReturnType<typeof articleControllerGetArticle>>,
  TError = AxiosError<unknown>
>(
  articleUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof articleControllerGetArticle>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getArticleControllerGetArticleQueryKey(articleUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleControllerGetArticle>>
  > = ({ signal }) =>
    articleControllerGetArticle(articleUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof articleControllerGetArticle>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!articleUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get all articles
 */
export const articleControllerGetArticles = (
  page: number,
  limit: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Article[]>> => {
  return axios.get(`/api/articles/articles/${page}/${limit}`, options);
};

export const getArticleControllerGetArticlesQueryKey = (
  page: number,
  limit: number
) => [`/api/articles/articles/${page}/${limit}`];

export type ArticleControllerGetArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerGetArticles>>
>;
export type ArticleControllerGetArticlesQueryError = AxiosError<unknown>;

export const useArticleControllerGetArticles = <
  TData = Awaited<ReturnType<typeof articleControllerGetArticles>>,
  TError = AxiosError<unknown>
>(
  page: number,
  limit: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof articleControllerGetArticles>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getArticleControllerGetArticlesQueryKey(page, limit);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleControllerGetArticles>>
  > = ({ signal }) =>
    articleControllerGetArticles(page, limit, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof articleControllerGetArticles>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(page && limit),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Create an article
 */
export const articleControllerCreateArticle = (
  addArticleDTO: AddArticleDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Article>> => {
  return axios.post(`/api/articles/create`, addArticleDTO, options);
};

export type ArticleControllerCreateArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerCreateArticle>>
>;
export type ArticleControllerCreateArticleMutationBody = AddArticleDTO;
export type ArticleControllerCreateArticleMutationError = AxiosError<unknown>;

export const useArticleControllerCreateArticle = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleControllerCreateArticle>>,
    TError,
    { data: AddArticleDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articleControllerCreateArticle>>,
    { data: AddArticleDTO }
  > = (props) => {
    const { data } = props ?? {};

    return articleControllerCreateArticle(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof articleControllerCreateArticle>>,
    TError,
    { data: AddArticleDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Edit an article
 */
export const articleControllerEditArticle = (
  updateArticleDTO: UpdateArticleDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Article>> => {
  return axios.put(`/api/articles/edit`, updateArticleDTO, options);
};

export type ArticleControllerEditArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerEditArticle>>
>;
export type ArticleControllerEditArticleMutationBody = UpdateArticleDTO;
export type ArticleControllerEditArticleMutationError = AxiosError<unknown>;

export const useArticleControllerEditArticle = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleControllerEditArticle>>,
    TError,
    { data: UpdateArticleDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articleControllerEditArticle>>,
    { data: UpdateArticleDTO }
  > = (props) => {
    const { data } = props ?? {};

    return articleControllerEditArticle(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof articleControllerEditArticle>>,
    TError,
    { data: UpdateArticleDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Delete an article
 */
export const articleControllerDeleteArticle = (
  deleteArticleDTO: DeleteArticleDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/api/articles/delete`, {
    data: deleteArticleDTO,
    ...options,
  });
};

export type ArticleControllerDeleteArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerDeleteArticle>>
>;
export type ArticleControllerDeleteArticleMutationBody = DeleteArticleDTO;
export type ArticleControllerDeleteArticleMutationError = AxiosError<unknown>;

export const useArticleControllerDeleteArticle = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleControllerDeleteArticle>>,
    TError,
    { data: DeleteArticleDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articleControllerDeleteArticle>>,
    { data: DeleteArticleDTO }
  > = (props) => {
    const { data } = props ?? {};

    return articleControllerDeleteArticle(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof articleControllerDeleteArticle>>,
    TError,
    { data: DeleteArticleDTO },
    TContext
  >(mutationFn, mutationOptions);
};
export const articleControllerUploadFile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/articles/uploadFile`, undefined, options);
};

export type ArticleControllerUploadFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerUploadFile>>
>;

export type ArticleControllerUploadFileMutationError = AxiosError<unknown>;

export const useArticleControllerUploadFile = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleControllerUploadFile>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articleControllerUploadFile>>,
    TVariables
  > = () => {
    return articleControllerUploadFile(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof articleControllerUploadFile>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const articleControllerGetArticleFiles = (
  articleUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/articles/files/${articleUUID}`, options);
};

export const getArticleControllerGetArticleFilesQueryKey = (
  articleUUID: string
) => [`/api/articles/files/${articleUUID}`];

export type ArticleControllerGetArticleFilesQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerGetArticleFiles>>
>;
export type ArticleControllerGetArticleFilesQueryError = AxiosError<unknown>;

export const useArticleControllerGetArticleFiles = <
  TData = Awaited<ReturnType<typeof articleControllerGetArticleFiles>>,
  TError = AxiosError<unknown>
>(
  articleUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof articleControllerGetArticleFiles>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getArticleControllerGetArticleFilesQueryKey(articleUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleControllerGetArticleFiles>>
  > = ({ signal }) =>
    articleControllerGetArticleFiles(articleUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof articleControllerGetArticleFiles>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!articleUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const articleControllerGetArticleFile = (
  fileUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/articles/file/${fileUUID}`, options);
};

export const getArticleControllerGetArticleFileQueryKey = (
  fileUUID: string
) => [`/api/articles/file/${fileUUID}`];

export type ArticleControllerGetArticleFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerGetArticleFile>>
>;
export type ArticleControllerGetArticleFileQueryError = AxiosError<unknown>;

export const useArticleControllerGetArticleFile = <
  TData = Awaited<ReturnType<typeof articleControllerGetArticleFile>>,
  TError = AxiosError<unknown>
>(
  fileUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof articleControllerGetArticleFile>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getArticleControllerGetArticleFileQueryKey(fileUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleControllerGetArticleFile>>
  > = ({ signal }) =>
    articleControllerGetArticleFile(fileUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof articleControllerGetArticleFile>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!fileUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
