/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * SchoolUtilities API
 * OpenAPI spec version: 1.0
 */
import { rest } from "msw";
import { faker } from "@faker-js/faker";

export const getArticleControllerGetArticleMock = () => ({
  articleUUID: faker.random.word(),
  articleHeadline: faker.random.word(),
  articleCatchPhrase: faker.random.word(),
  articleContent: faker.random.word(),
  articleType: faker.datatype.number({ min: undefined, max: undefined }),
  articleIsPublic: faker.datatype.boolean(),
  articlePublishTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
  articleCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
  creator: {
    userUUID: faker.random.word(),
    userFirstname: faker.random.word(),
    userLastname: faker.random.word(),
    userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userEmail: faker.random.word(),
    userEmailVerified: faker.datatype.boolean(),
    userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    articles: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissionGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissions: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schools: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    userSettings: {},
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schoolRoleName: faker.random.word(),
  },
  readingTime: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getArticleControllerGetArticlesMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    articleUUID: faker.random.word(),
    articleHeadline: faker.random.word(),
    articleCatchPhrase: faker.random.word(),
    articleContent: faker.random.word(),
    articleType: faker.datatype.number({ min: undefined, max: undefined }),
    articleIsPublic: faker.datatype.boolean(),
    articlePublishTimestamp: `${
      faker.date.past().toISOString().split(".")[0]
    }Z`,
    articleCreationTimestamp: `${
      faker.date.past().toISOString().split(".")[0]
    }Z`,
    creator: {
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${
        faker.date.past().toISOString().split(".")[0]
      }Z`,
      userLastLoginTimestamp: `${
        faker.date.past().toISOString().split(".")[0]
      }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    },
    readingTime: faker.datatype.number({ min: undefined, max: undefined }),
  }));

export const getArticleControllerCreateArticleMock = () => ({
  articleUUID: faker.random.word(),
  articleHeadline: faker.random.word(),
  articleCatchPhrase: faker.random.word(),
  articleContent: faker.random.word(),
  articleType: faker.datatype.number({ min: undefined, max: undefined }),
  articleIsPublic: faker.datatype.boolean(),
  articlePublishTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
  articleCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
  creator: {
    userUUID: faker.random.word(),
    userFirstname: faker.random.word(),
    userLastname: faker.random.word(),
    userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userEmail: faker.random.word(),
    userEmailVerified: faker.datatype.boolean(),
    userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    articles: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissionGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissions: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schools: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    userSettings: {},
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schoolRoleName: faker.random.word(),
  },
  readingTime: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getArticleControllerEditArticleMock = () => ({
  articleUUID: faker.random.word(),
  articleHeadline: faker.random.word(),
  articleCatchPhrase: faker.random.word(),
  articleContent: faker.random.word(),
  articleType: faker.datatype.number({ min: undefined, max: undefined }),
  articleIsPublic: faker.datatype.boolean(),
  articlePublishTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
  articleCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
  creator: {
    userUUID: faker.random.word(),
    userFirstname: faker.random.word(),
    userLastname: faker.random.word(),
    userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userEmail: faker.random.word(),
    userEmailVerified: faker.datatype.boolean(),
    userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    articles: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissionGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissions: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schools: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    userSettings: {},
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schoolRoleName: faker.random.word(),
  },
  readingTime: faker.datatype.number({ min: undefined, max: undefined }),
});

export const getArticlesMSW = () => [
  rest.get("*/api/articles/article/:articleUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getArticleControllerGetArticleMock())
    );
  }),
  rest.get("*/api/articles/articles/:page/:limit", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getArticleControllerGetArticlesMock())
    );
  }),
  rest.post("*/api/articles/create", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getArticleControllerCreateArticleMock())
    );
  }),
  rest.put("*/api/articles/edit", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getArticleControllerEditArticleMock())
    );
  }),
  rest.delete("*/api/articles/delete", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.post("*/api/articles/uploadFile", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/api/articles/files/:articleUUID", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/api/articles/file/:fileUUID", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
];
