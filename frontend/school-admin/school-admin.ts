/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * SchoolUtilities API
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  School,
  AddSchoolDTO,
  Department,
  AddDepartmentDTO,
  DeleteDepartmentDTO,
  UpdateDepartmentDTO,
  SchoolClass,
  AddSchoolClassDTO,
  DeleteSchoolClassDTO,
  UpdateSchoolDTO,
  AddSchoolClassUserDTO,
  DeleteSchoolClassUserDTO,
  JoinCode,
  AddJoinCodeDTO,
  DeleteJoinCodeDTO,
  UpdateJoinCodeDTO,
  JoinSchoolDTO,
  LeaveSchoolDTO,
  User,
  UserRole,
  SchoolSubject,
  AddSchoolSubjectDTO,
  UpdateSchoolSubjectDTO,
  SchoolRoom,
  AddSchoolRoomDTO,
  UpdateSchoolRoomDTO,
  UpdateRoleDTO,
} from "../../backend/src/model";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Create a new school
 */
export const schoolAdminControllerAddSchoolConfig = (
  addSchoolDTO: AddSchoolDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<School>> => {
  return axios.post(`/api/schoolAdmin/school`, addSchoolDTO, options);
};

export type SchoolAdminControllerAddSchoolConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerAddSchoolConfig>>
>;
export type SchoolAdminControllerAddSchoolConfigMutationBody = AddSchoolDTO;
export type SchoolAdminControllerAddSchoolConfigMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerAddSchoolConfig = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerAddSchoolConfig>>,
    TError,
    { data: AddSchoolDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerAddSchoolConfig>>,
    { data: AddSchoolDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerAddSchoolConfig(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerAddSchoolConfig>>,
    TError,
    { data: AddSchoolDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Add a department to a school
 */
export const schoolAdminControllerAddDepartment = (
  addDepartmentDTO: AddDepartmentDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Department>> => {
  return axios.post(`/api/schoolAdmin/department`, addDepartmentDTO, options);
};

export type SchoolAdminControllerAddDepartmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerAddDepartment>>
>;
export type SchoolAdminControllerAddDepartmentMutationBody = AddDepartmentDTO;
export type SchoolAdminControllerAddDepartmentMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerAddDepartment = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerAddDepartment>>,
    TError,
    { data: AddDepartmentDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerAddDepartment>>,
    { data: AddDepartmentDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerAddDepartment(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerAddDepartment>>,
    TError,
    { data: AddDepartmentDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Remove department from school
 */
export const schoolAdminControllerRemoveDepartment = (
  deleteDepartmentDTO: DeleteDepartmentDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/api/schoolAdmin/department`, {
    data: deleteDepartmentDTO,
    ...options,
  });
};

export type SchoolAdminControllerRemoveDepartmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerRemoveDepartment>>
>;
export type SchoolAdminControllerRemoveDepartmentMutationBody =
  DeleteDepartmentDTO;
export type SchoolAdminControllerRemoveDepartmentMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerRemoveDepartment = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveDepartment>>,
    TError,
    { data: DeleteDepartmentDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveDepartment>>,
    { data: DeleteDepartmentDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerRemoveDepartment(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveDepartment>>,
    TError,
    { data: DeleteDepartmentDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Update department in school
 */
export const schoolAdminControllerUpdateDepartment = (
  updateDepartmentDTO: UpdateDepartmentDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Department>> => {
  return axios.put(`/api/schoolAdmin/department`, updateDepartmentDTO, options);
};

export type SchoolAdminControllerUpdateDepartmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerUpdateDepartment>>
>;
export type SchoolAdminControllerUpdateDepartmentMutationBody =
  UpdateDepartmentDTO;
export type SchoolAdminControllerUpdateDepartmentMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerUpdateDepartment = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateDepartment>>,
    TError,
    { data: UpdateDepartmentDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateDepartment>>,
    { data: UpdateDepartmentDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerUpdateDepartment(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateDepartment>>,
    TError,
    { data: UpdateDepartmentDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Add multiple departments to a school
 */
export const schoolAdminControllerAddDepartments = (
  addSchoolDTO: AddSchoolDTO[],
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Department[]>> => {
  return axios.post(`/api/schoolAdmin/departments`, addSchoolDTO, options);
};

export type SchoolAdminControllerAddDepartmentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerAddDepartments>>
>;
export type SchoolAdminControllerAddDepartmentsMutationBody = AddSchoolDTO[];
export type SchoolAdminControllerAddDepartmentsMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerAddDepartments = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerAddDepartments>>,
    TError,
    { data: AddSchoolDTO[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerAddDepartments>>,
    { data: AddSchoolDTO[] }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerAddDepartments(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerAddDepartments>>,
    TError,
    { data: AddSchoolDTO[] },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get all departments in a school
 */
export const schoolAdminControllerGetDepartments = (
  schoolUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Department[]>> => {
  return axios.get(`/api/schoolAdmin/departments/${schoolUUID}`, options);
};

export const getSchoolAdminControllerGetDepartmentsQueryKey = (
  schoolUUID: string
) => [`/api/schoolAdmin/departments/${schoolUUID}`];

export type SchoolAdminControllerGetDepartmentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetDepartments>>
>;
export type SchoolAdminControllerGetDepartmentsQueryError = AxiosError<unknown>;

export const useSchoolAdminControllerGetDepartments = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetDepartments>>,
  TError = AxiosError<unknown>
>(
  schoolUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetDepartments>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetDepartmentsQueryKey(schoolUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetDepartments>>
  > = ({ signal }) =>
    schoolAdminControllerGetDepartments(schoolUUID, {
      signal,
      ...axiosOptions,
    });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetDepartments>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!schoolUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Add a class to a department
 */
export const schoolAdminControllerAddClass = (
  addSchoolClassDTO: AddSchoolClassDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolClass>> => {
  return axios.post(`/api/schoolAdmin/class`, addSchoolClassDTO, options);
};

export type SchoolAdminControllerAddClassMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerAddClass>>
>;
export type SchoolAdminControllerAddClassMutationBody = AddSchoolClassDTO;
export type SchoolAdminControllerAddClassMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerAddClass = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerAddClass>>,
    TError,
    { data: AddSchoolClassDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerAddClass>>,
    { data: AddSchoolClassDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerAddClass(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerAddClass>>,
    TError,
    { data: AddSchoolClassDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Remove a class from a department
 */
export const schoolAdminControllerRemoveClass = (
  deleteSchoolClassDTO: DeleteSchoolClassDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/api/schoolAdmin/class`, {
    data: deleteSchoolClassDTO,
    ...options,
  });
};

export type SchoolAdminControllerRemoveClassMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerRemoveClass>>
>;
export type SchoolAdminControllerRemoveClassMutationBody = DeleteSchoolClassDTO;
export type SchoolAdminControllerRemoveClassMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerRemoveClass = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveClass>>,
    TError,
    { data: DeleteSchoolClassDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveClass>>,
    { data: DeleteSchoolClassDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerRemoveClass(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveClass>>,
    TError,
    { data: DeleteSchoolClassDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Update a class in a department
 */
export const schoolAdminControllerUpdateClass = (
  updateSchoolDTO: UpdateSchoolDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolClass>> => {
  return axios.put(`/api/schoolAdmin/class`, updateSchoolDTO, options);
};

export type SchoolAdminControllerUpdateClassMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerUpdateClass>>
>;
export type SchoolAdminControllerUpdateClassMutationBody = UpdateSchoolDTO;
export type SchoolAdminControllerUpdateClassMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerUpdateClass = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateClass>>,
    TError,
    { data: UpdateSchoolDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateClass>>,
    { data: UpdateSchoolDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerUpdateClass(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateClass>>,
    TError,
    { data: UpdateSchoolDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get all classes of a school
 */
export const schoolAdminControllerGetClasses = (
  schoolUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolClass[]>> => {
  return axios.get(`/api/schoolAdmin/classes/${schoolUUID}`, options);
};

export const getSchoolAdminControllerGetClassesQueryKey = (
  schoolUUID: string
) => [`/api/schoolAdmin/classes/${schoolUUID}`];

export type SchoolAdminControllerGetClassesQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetClasses>>
>;
export type SchoolAdminControllerGetClassesQueryError = AxiosError<unknown>;

export const useSchoolAdminControllerGetClasses = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetClasses>>,
  TError = AxiosError<unknown>
>(
  schoolUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetClasses>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetClassesQueryKey(schoolUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetClasses>>
  > = ({ signal }) =>
    schoolAdminControllerGetClasses(schoolUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetClasses>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!schoolUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Add one or muliple users to a schoolclass
 */
export const schoolAdminControllerAddUsersToClass = (
  addSchoolClassUserDTO: AddSchoolClassUserDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolClass>> => {
  return axios.post(
    `/api/schoolAdmin/class/users`,
    addSchoolClassUserDTO,
    options
  );
};

export type SchoolAdminControllerAddUsersToClassMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerAddUsersToClass>>
>;
export type SchoolAdminControllerAddUsersToClassMutationBody =
  AddSchoolClassUserDTO;
export type SchoolAdminControllerAddUsersToClassMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerAddUsersToClass = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerAddUsersToClass>>,
    TError,
    { data: AddSchoolClassUserDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerAddUsersToClass>>,
    { data: AddSchoolClassUserDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerAddUsersToClass(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerAddUsersToClass>>,
    TError,
    { data: AddSchoolClassUserDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Remove one or multiple users from a schoolclass
 */
export const schoolAdminControllerRemoveUsersFromClass = (
  deleteSchoolClassUserDTO: DeleteSchoolClassUserDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/api/schoolAdmin/class/users`, {
    data: deleteSchoolClassUserDTO,
    ...options,
  });
};

export type SchoolAdminControllerRemoveUsersFromClassMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveUsersFromClass>>
  >;
export type SchoolAdminControllerRemoveUsersFromClassMutationBody =
  DeleteSchoolClassUserDTO;
export type SchoolAdminControllerRemoveUsersFromClassMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerRemoveUsersFromClass = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveUsersFromClass>>,
    TError,
    { data: DeleteSchoolClassUserDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveUsersFromClass>>,
    { data: DeleteSchoolClassUserDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerRemoveUsersFromClass(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveUsersFromClass>>,
    TError,
    { data: DeleteSchoolClassUserDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Add a join code to a school
 */
export const schoolAdminControllerAddJoinCode = (
  addJoinCodeDTO: AddJoinCodeDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<JoinCode>> => {
  return axios.post(`/api/schoolAdmin/joinCode`, addJoinCodeDTO, options);
};

export type SchoolAdminControllerAddJoinCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerAddJoinCode>>
>;
export type SchoolAdminControllerAddJoinCodeMutationBody = AddJoinCodeDTO;
export type SchoolAdminControllerAddJoinCodeMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerAddJoinCode = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerAddJoinCode>>,
    TError,
    { data: AddJoinCodeDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerAddJoinCode>>,
    { data: AddJoinCodeDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerAddJoinCode(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerAddJoinCode>>,
    TError,
    { data: AddJoinCodeDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Remove a join code from a school
 */
export const schoolAdminControllerRemoveJoinCode = (
  deleteJoinCodeDTO: DeleteJoinCodeDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/api/schoolAdmin/joinCode`, {
    data: deleteJoinCodeDTO,
    ...options,
  });
};

export type SchoolAdminControllerRemoveJoinCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerRemoveJoinCode>>
>;
export type SchoolAdminControllerRemoveJoinCodeMutationBody = DeleteJoinCodeDTO;
export type SchoolAdminControllerRemoveJoinCodeMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerRemoveJoinCode = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveJoinCode>>,
    TError,
    { data: DeleteJoinCodeDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveJoinCode>>,
    { data: DeleteJoinCodeDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerRemoveJoinCode(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveJoinCode>>,
    TError,
    { data: DeleteJoinCodeDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Update a join code in a school
 */
export const schoolAdminControllerUpdateJoinCode = (
  updateJoinCodeDTO: UpdateJoinCodeDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<JoinCode>> => {
  return axios.put(`/api/schoolAdmin/joinCode`, updateJoinCodeDTO, options);
};

export type SchoolAdminControllerUpdateJoinCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerUpdateJoinCode>>
>;
export type SchoolAdminControllerUpdateJoinCodeMutationBody = UpdateJoinCodeDTO;
export type SchoolAdminControllerUpdateJoinCodeMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerUpdateJoinCode = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateJoinCode>>,
    TError,
    { data: UpdateJoinCodeDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateJoinCode>>,
    { data: UpdateJoinCodeDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerUpdateJoinCode(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateJoinCode>>,
    TError,
    { data: UpdateJoinCodeDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get all join codes of a school
 */
export const schoolAdminControllerGetJoinCodes = (
  schoolUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<JoinCode[]>> => {
  return axios.get(`/api/schoolAdmin/joinCode/${schoolUUID}`, options);
};

export const getSchoolAdminControllerGetJoinCodesQueryKey = (
  schoolUUID: string
) => [`/api/schoolAdmin/joinCode/${schoolUUID}`];

export type SchoolAdminControllerGetJoinCodesQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetJoinCodes>>
>;
export type SchoolAdminControllerGetJoinCodesQueryError = AxiosError<unknown>;

export const useSchoolAdminControllerGetJoinCodes = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetJoinCodes>>,
  TError = AxiosError<unknown>
>(
  schoolUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetJoinCodes>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetJoinCodesQueryKey(schoolUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetJoinCodes>>
  > = ({ signal }) =>
    schoolAdminControllerGetJoinCodes(schoolUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetJoinCodes>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!schoolUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Add a user to a school
 */
export const schoolAdminControllerJoinSchool = (
  joinSchoolDTO: JoinSchoolDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<School>> => {
  return axios.post(`/api/schoolAdmin/joinSchool`, joinSchoolDTO, options);
};

export type SchoolAdminControllerJoinSchoolMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerJoinSchool>>
>;
export type SchoolAdminControllerJoinSchoolMutationBody = JoinSchoolDTO;
export type SchoolAdminControllerJoinSchoolMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerJoinSchool = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerJoinSchool>>,
    TError,
    { data: JoinSchoolDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerJoinSchool>>,
    { data: JoinSchoolDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerJoinSchool(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerJoinSchool>>,
    TError,
    { data: JoinSchoolDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Remove a user from a school
 */
export const schoolAdminControllerLeaveSchool = (
  leaveSchoolDTO: LeaveSchoolDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.post(`/api/schoolAdmin/leaveSchool`, leaveSchoolDTO, options);
};

export type SchoolAdminControllerLeaveSchoolMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerLeaveSchool>>
>;
export type SchoolAdminControllerLeaveSchoolMutationBody = LeaveSchoolDTO;
export type SchoolAdminControllerLeaveSchoolMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerLeaveSchool = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerLeaveSchool>>,
    TError,
    { data: LeaveSchoolDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerLeaveSchool>>,
    { data: LeaveSchoolDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerLeaveSchool(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerLeaveSchool>>,
    TError,
    { data: LeaveSchoolDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get all users of a school
 */
export const schoolAdminControllerGetUsersOfSchool = (
  schoolUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<User[]>> => {
  return axios.get(`/api/schoolAdmin/users/${schoolUUID}`, options);
};

export const getSchoolAdminControllerGetUsersOfSchoolQueryKey = (
  schoolUUID: string
) => [`/api/schoolAdmin/users/${schoolUUID}`];

export type SchoolAdminControllerGetUsersOfSchoolQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetUsersOfSchool>>
>;
export type SchoolAdminControllerGetUsersOfSchoolQueryError =
  AxiosError<unknown>;

export const useSchoolAdminControllerGetUsersOfSchool = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetUsersOfSchool>>,
  TError = AxiosError<unknown>
>(
  schoolUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetUsersOfSchool>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetUsersOfSchoolQueryKey(schoolUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetUsersOfSchool>>
  > = ({ signal }) =>
    schoolAdminControllerGetUsersOfSchool(schoolUUID, {
      signal,
      ...axiosOptions,
    });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetUsersOfSchool>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!schoolUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get permissions of a user
 */
export const schoolAdminControllerGetUserPermissions = (
  userUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UserRole[]>> => {
  return axios.get(`/api/schoolAdmin/permissions/${userUUID}`, options);
};

export const getSchoolAdminControllerGetUserPermissionsQueryKey = (
  userUUID: string
) => [`/api/schoolAdmin/permissions/${userUUID}`];

export type SchoolAdminControllerGetUserPermissionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetUserPermissions>>
>;
export type SchoolAdminControllerGetUserPermissionsQueryError =
  AxiosError<unknown>;

export const useSchoolAdminControllerGetUserPermissions = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetUserPermissions>>,
  TError = AxiosError<unknown>
>(
  userUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetUserPermissions>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetUserPermissionsQueryKey(userUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetUserPermissions>>
  > = ({ signal }) =>
    schoolAdminControllerGetUserPermissions(userUUID, {
      signal,
      ...axiosOptions,
    });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetUserPermissions>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!userUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Add a subject to a school
 */
export const schoolAdminControllerAddSubject = (
  addSchoolSubjectDTO: AddSchoolSubjectDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolSubject>> => {
  return axios.post(`/api/schoolAdmin/subject`, addSchoolSubjectDTO, options);
};

export type SchoolAdminControllerAddSubjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerAddSubject>>
>;
export type SchoolAdminControllerAddSubjectMutationBody = AddSchoolSubjectDTO;
export type SchoolAdminControllerAddSubjectMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerAddSubject = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerAddSubject>>,
    TError,
    { data: AddSchoolSubjectDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerAddSubject>>,
    { data: AddSchoolSubjectDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerAddSubject(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerAddSubject>>,
    TError,
    { data: AddSchoolSubjectDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Update a subject of a school
 */
export const schoolAdminControllerUpdateSubject = (
  updateSchoolSubjectDTO: UpdateSchoolSubjectDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolSubject>> => {
  return axios.put(`/api/schoolAdmin/subject`, updateSchoolSubjectDTO, options);
};

export type SchoolAdminControllerUpdateSubjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerUpdateSubject>>
>;
export type SchoolAdminControllerUpdateSubjectMutationBody =
  UpdateSchoolSubjectDTO;
export type SchoolAdminControllerUpdateSubjectMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerUpdateSubject = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateSubject>>,
    TError,
    { data: UpdateSchoolSubjectDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateSubject>>,
    { data: UpdateSchoolSubjectDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerUpdateSubject(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateSubject>>,
    TError,
    { data: UpdateSchoolSubjectDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get a subject of a school
 */
export const schoolAdminControllerGetSubject = (
  subjectUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolSubject>> => {
  return axios.get(`/api/schoolAdmin/subject/${subjectUUID}`, options);
};

export const getSchoolAdminControllerGetSubjectQueryKey = (
  subjectUUID: string
) => [`/api/schoolAdmin/subject/${subjectUUID}`];

export type SchoolAdminControllerGetSubjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetSubject>>
>;
export type SchoolAdminControllerGetSubjectQueryError = AxiosError<unknown>;

export const useSchoolAdminControllerGetSubject = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetSubject>>,
  TError = AxiosError<unknown>
>(
  subjectUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetSubject>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetSubjectQueryKey(subjectUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetSubject>>
  > = ({ signal }) =>
    schoolAdminControllerGetSubject(subjectUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetSubject>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!subjectUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Delete a subject of a school
 */
export const schoolAdminControllerRemoveSubject = (
  subjectUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/api/schoolAdmin/subject/${subjectUUID}`, options);
};

export type SchoolAdminControllerRemoveSubjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerRemoveSubject>>
>;

export type SchoolAdminControllerRemoveSubjectMutationError =
  AxiosError<unknown>;

export const useSchoolAdminControllerRemoveSubject = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveSubject>>,
    TError,
    { subjectUUID: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveSubject>>,
    { subjectUUID: string }
  > = (props) => {
    const { subjectUUID } = props ?? {};

    return schoolAdminControllerRemoveSubject(subjectUUID, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveSubject>>,
    TError,
    { subjectUUID: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get all subjects of a school
 */
export const schoolAdminControllerGetSubjects = (
  schoolUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolSubject[]>> => {
  return axios.get(`/api/schoolAdmin/subjects/${schoolUUID}`, options);
};

export const getSchoolAdminControllerGetSubjectsQueryKey = (
  schoolUUID: string
) => [`/api/schoolAdmin/subjects/${schoolUUID}`];

export type SchoolAdminControllerGetSubjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetSubjects>>
>;
export type SchoolAdminControllerGetSubjectsQueryError = AxiosError<unknown>;

export const useSchoolAdminControllerGetSubjects = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetSubjects>>,
  TError = AxiosError<unknown>
>(
  schoolUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetSubjects>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetSubjectsQueryKey(schoolUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetSubjects>>
  > = ({ signal }) =>
    schoolAdminControllerGetSubjects(schoolUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetSubjects>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!schoolUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get a room of a school
 */
export const schoolAdminControllerGetRoom = (
  roomUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolRoom>> => {
  return axios.get(`/api/schoolAdmin/room/${roomUUID}`, options);
};

export const getSchoolAdminControllerGetRoomQueryKey = (roomUUID: string) => [
  `/api/schoolAdmin/room/${roomUUID}`,
];

export type SchoolAdminControllerGetRoomQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetRoom>>
>;
export type SchoolAdminControllerGetRoomQueryError = AxiosError<unknown>;

export const useSchoolAdminControllerGetRoom = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetRoom>>,
  TError = AxiosError<unknown>
>(
  roomUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetRoom>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSchoolAdminControllerGetRoomQueryKey(roomUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetRoom>>
  > = ({ signal }) =>
    schoolAdminControllerGetRoom(roomUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetRoom>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!roomUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Delete a room of a school
 */
export const schoolAdminControllerRemoveRoom = (
  roomUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/api/schoolAdmin/room/${roomUUID}`, options);
};

export type SchoolAdminControllerRemoveRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerRemoveRoom>>
>;

export type SchoolAdminControllerRemoveRoomMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerRemoveRoom = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveRoom>>,
    TError,
    { roomUUID: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveRoom>>,
    { roomUUID: string }
  > = (props) => {
    const { roomUUID } = props ?? {};

    return schoolAdminControllerRemoveRoom(roomUUID, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerRemoveRoom>>,
    TError,
    { roomUUID: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Get all rooms of a school
 */
export const schoolAdminControllerGetRooms = (
  schoolUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolRoom[]>> => {
  return axios.get(`/api/schoolAdmin/rooms/${schoolUUID}`, options);
};

export const getSchoolAdminControllerGetRoomsQueryKey = (
  schoolUUID: string
) => [`/api/schoolAdmin/rooms/${schoolUUID}`];

export type SchoolAdminControllerGetRoomsQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetRooms>>
>;
export type SchoolAdminControllerGetRoomsQueryError = AxiosError<unknown>;

export const useSchoolAdminControllerGetRooms = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetRooms>>,
  TError = AxiosError<unknown>
>(
  schoolUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetRooms>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetRoomsQueryKey(schoolUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetRooms>>
  > = ({ signal }) =>
    schoolAdminControllerGetRooms(schoolUUID, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetRooms>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!schoolUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Add a room to a school
 */
export const schoolAdminControllerAddRoom = (
  addSchoolRoomDTO: AddSchoolRoomDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolRoom>> => {
  return axios.post(`/api/schoolAdmin/room`, addSchoolRoomDTO, options);
};

export type SchoolAdminControllerAddRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerAddRoom>>
>;
export type SchoolAdminControllerAddRoomMutationBody = AddSchoolRoomDTO;
export type SchoolAdminControllerAddRoomMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerAddRoom = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerAddRoom>>,
    TError,
    { data: AddSchoolRoomDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerAddRoom>>,
    { data: AddSchoolRoomDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerAddRoom(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerAddRoom>>,
    TError,
    { data: AddSchoolRoomDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Update a room of a school
 */
export const schoolAdminControllerUpdateRoom = (
  updateSchoolRoomDTO: UpdateSchoolRoomDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SchoolRoom>> => {
  return axios.put(`/api/schoolAdmin/room`, updateSchoolRoomDTO, options);
};

export type SchoolAdminControllerUpdateRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerUpdateRoom>>
>;
export type SchoolAdminControllerUpdateRoomMutationBody = UpdateSchoolRoomDTO;
export type SchoolAdminControllerUpdateRoomMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerUpdateRoom = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateRoom>>,
    TError,
    { data: UpdateSchoolRoomDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateRoom>>,
    { data: UpdateSchoolRoomDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerUpdateRoom(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateRoom>>,
    TError,
    { data: UpdateSchoolRoomDTO },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @deprecated
 */
export const schoolAdminControllerGetSchoolInformation = (
  schoolUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/schoolAdmin/information/${schoolUUID}`, options);
};

export const getSchoolAdminControllerGetSchoolInformationQueryKey = (
  schoolUUID: string
) => [`/api/schoolAdmin/information/${schoolUUID}`];

export type SchoolAdminControllerGetSchoolInformationQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerGetSchoolInformation>>
>;
export type SchoolAdminControllerGetSchoolInformationQueryError =
  AxiosError<unknown>;

export const useSchoolAdminControllerGetSchoolInformation = <
  TData = Awaited<ReturnType<typeof schoolAdminControllerGetSchoolInformation>>,
  TError = AxiosError<unknown>
>(
  schoolUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof schoolAdminControllerGetSchoolInformation>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetSchoolInformationQueryKey(schoolUUID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof schoolAdminControllerGetSchoolInformation>>
  > = ({ signal }) =>
    schoolAdminControllerGetSchoolInformation(schoolUUID, {
      signal,
      ...axiosOptions,
    });

  const query = useQuery<
    Awaited<ReturnType<typeof schoolAdminControllerGetSchoolInformation>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!schoolUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @deprecated
 */
export const schoolAdminControllerGetDetailedSchoolInformation = (
  schoolUUID: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(
    `/api/schoolAdmin/detailedInformation/${schoolUUID}`,
    options
  );
};

export const getSchoolAdminControllerGetDetailedSchoolInformationQueryKey = (
  schoolUUID: string
) => [`/api/schoolAdmin/detailedInformation/${schoolUUID}`];

export type SchoolAdminControllerGetDetailedSchoolInformationQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof schoolAdminControllerGetDetailedSchoolInformation>
    >
  >;
export type SchoolAdminControllerGetDetailedSchoolInformationQueryError =
  AxiosError<unknown>;

export const useSchoolAdminControllerGetDetailedSchoolInformation = <
  TData = Awaited<
    ReturnType<typeof schoolAdminControllerGetDetailedSchoolInformation>
  >,
  TError = AxiosError<unknown>
>(
  schoolUUID: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof schoolAdminControllerGetDetailedSchoolInformation>
      >,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSchoolAdminControllerGetDetailedSchoolInformationQueryKey(schoolUUID);

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<typeof schoolAdminControllerGetDetailedSchoolInformation>
    >
  > = ({ signal }) =>
    schoolAdminControllerGetDetailedSchoolInformation(schoolUUID, {
      signal,
      ...axiosOptions,
    });

  const query = useQuery<
    Awaited<
      ReturnType<typeof schoolAdminControllerGetDetailedSchoolInformation>
    >,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!schoolUUID,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Update role of user
 */
export const schoolAdminControllerUpdateRole = (
  updateRoleDTO: UpdateRoleDTO,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UserRole>> => {
  return axios.put(`/api/schoolAdmin/role`, updateRoleDTO, options);
};

export type SchoolAdminControllerUpdateRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolAdminControllerUpdateRole>>
>;
export type SchoolAdminControllerUpdateRoleMutationBody = UpdateRoleDTO;
export type SchoolAdminControllerUpdateRoleMutationError = AxiosError<unknown>;

export const useSchoolAdminControllerUpdateRole = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateRole>>,
    TError,
    { data: UpdateRoleDTO },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateRole>>,
    { data: UpdateRoleDTO }
  > = (props) => {
    const { data } = props ?? {};

    return schoolAdminControllerUpdateRole(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof schoolAdminControllerUpdateRole>>,
    TError,
    { data: UpdateRoleDTO },
    TContext
  >(mutationFn, mutationOptions);
};
