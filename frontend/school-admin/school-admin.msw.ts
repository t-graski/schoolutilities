/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * SchoolUtilities API
 * OpenAPI spec version: 1.0
 */
import { rest } from "msw";
import { faker } from "@faker-js/faker";

export const getSchoolAdminControllerAddSchoolConfigMock = () => ({
  courses: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    courseUUID: faker.random.word(),
    courseName: faker.random.word(),
    courseDescription: faker.random.word(),
    school: {
      departments: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolJoinCodes: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      schoolRooms: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        timeTableExamRoomUUID: faker.random.word(),
        schoolRoomName: faker.random.word(),
        schoolRoomAbbreviation: faker.random.word(),
        schoolRoomBuilding: faker.random.word(),
      })),
      schoolSubjects: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
    },
    schoolSubject: {
      schoolSubjectUUID: faker.random.word(),
      schoolSubjectName: faker.random.word(),
      schoolSubjectAbbreviation: faker.random.word(),
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    },
    courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
      }Z`,
    creator: {
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    },
    canEdit: faker.datatype.boolean(),
    courseUsers: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    })),
    courseClasses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
  })),
  departments: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({})),
  schoolJoinCodes: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({})),
  schoolUsers: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    userUUID: faker.random.word(),
    userFirstname: faker.random.word(),
    userLastname: faker.random.word(),
    userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userEmail: faker.random.word(),
    userEmailVerified: faker.datatype.boolean(),
    userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    articles: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissionGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissions: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schools: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    userSettings: {},
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schoolRoleName: faker.random.word(),
  })),
  schoolRooms: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    timeTableExamRoomUUID: faker.random.word(),
    schoolRoomName: faker.random.word(),
    schoolRoomAbbreviation: faker.random.word(),
    schoolRoomBuilding: faker.random.word(),
    school: {
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        courseUUID: faker.random.word(),
        courseName: faker.random.word(),
        courseDescription: faker.random.word(),
        schoolSubject: {
          schoolSubjectUUID: faker.random.word(),
          schoolSubjectName: faker.random.word(),
          schoolSubjectAbbreviation: faker.random.word(),
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        },
        courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        creator: {
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        },
        canEdit: faker.datatype.boolean(),
        courseUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        courseClasses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
      departments: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolJoinCodes: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      schoolSubjects: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        courses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          courseUUID: faker.random.word(),
          courseName: faker.random.word(),
          courseDescription: faker.random.word(),
          schoolSubject: {
            schoolSubjectUUID: faker.random.word(),
            schoolSubjectName: faker.random.word(),
            schoolSubjectAbbreviation: faker.random.word(),
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({})),
          },
          courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          creator: {
            userUUID: faker.random.word(),
            userFirstname: faker.random.word(),
            userLastname: faker.random.word(),
            userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
            userEmail: faker.random.word(),
            userEmailVerified: faker.datatype.boolean(),
            userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            articles: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            courseElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissionGrades: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissions: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schools: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            userSettings: {},
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schoolRoleName: faker.random.word(),
          },
          canEdit: faker.datatype.boolean(),
          courseUsers: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            userUUID: faker.random.word(),
            userFirstname: faker.random.word(),
            userLastname: faker.random.word(),
            userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
            userEmail: faker.random.word(),
            userEmailVerified: faker.datatype.boolean(),
            userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            articles: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            courseElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissionGrades: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissions: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schools: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            userSettings: {},
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schoolRoleName: faker.random.word(),
          })),
          courseClasses: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
          courseGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        })),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
    },
  })),
  schoolSubjects: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    schoolSubjectUUID: faker.random.word(),
    schoolSubjectName: faker.random.word(),
    schoolSubjectAbbreviation: faker.random.word(),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      courseUUID: faker.random.word(),
      courseName: faker.random.word(),
      courseDescription: faker.random.word(),
      school: {
        departments: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        schoolJoinCodes: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        schoolUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        schoolRooms: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          timeTableExamRoomUUID: faker.random.word(),
          schoolRoomName: faker.random.word(),
          schoolRoomAbbreviation: faker.random.word(),
          schoolRoomBuilding: faker.random.word(),
        })),
      },
      schoolSubject: {
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      },
      courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      creator: {
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      },
      canEdit: faker.datatype.boolean(),
      courseUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      courseClasses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
  })),
});

export const getSchoolAdminControllerAddDepartmentMock = () => ({});

export const getSchoolAdminControllerRemoveDepartmentMock = () =>
  faker.datatype.number().toString();

export const getSchoolAdminControllerUpdateDepartmentMock = () => ({});

export const getSchoolAdminControllerAddDepartmentsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({}));

export const getSchoolAdminControllerGetDepartmentsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({}));

export const getSchoolAdminControllerAddClassMock = () => ({});

export const getSchoolAdminControllerRemoveClassMock = () =>
  faker.datatype.number().toString();

export const getSchoolAdminControllerUpdateClassMock = () => ({});

export const getSchoolAdminControllerGetClassesMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({}));

export const getSchoolAdminControllerAddUsersToClassMock = () => ({});

export const getSchoolAdminControllerRemoveUsersFromClassMock = () =>
  faker.datatype.number().toString();

export const getSchoolAdminControllerAddJoinCodeMock = () => ({});

export const getSchoolAdminControllerRemoveJoinCodeMock = () =>
  faker.datatype.number().toString();

export const getSchoolAdminControllerUpdateJoinCodeMock = () => ({});

export const getSchoolAdminControllerGetJoinCodesMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({}));

export const getSchoolAdminControllerJoinSchoolMock = () => ({
  courses: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    courseUUID: faker.random.word(),
    courseName: faker.random.word(),
    courseDescription: faker.random.word(),
    school: {
      departments: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolJoinCodes: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      schoolRooms: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        timeTableExamRoomUUID: faker.random.word(),
        schoolRoomName: faker.random.word(),
        schoolRoomAbbreviation: faker.random.word(),
        schoolRoomBuilding: faker.random.word(),
      })),
      schoolSubjects: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
    },
    schoolSubject: {
      schoolSubjectUUID: faker.random.word(),
      schoolSubjectName: faker.random.word(),
      schoolSubjectAbbreviation: faker.random.word(),
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    },
    courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
      }Z`,
    creator: {
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    },
    canEdit: faker.datatype.boolean(),
    courseUsers: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    })),
    courseClasses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
  })),
  departments: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({})),
  schoolJoinCodes: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({})),
  schoolUsers: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    userUUID: faker.random.word(),
    userFirstname: faker.random.word(),
    userLastname: faker.random.word(),
    userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userEmail: faker.random.word(),
    userEmailVerified: faker.datatype.boolean(),
    userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    articles: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissionGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissions: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schools: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    userSettings: {},
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schoolRoleName: faker.random.word(),
  })),
  schoolRooms: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    timeTableExamRoomUUID: faker.random.word(),
    schoolRoomName: faker.random.word(),
    schoolRoomAbbreviation: faker.random.word(),
    schoolRoomBuilding: faker.random.word(),
    school: {
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        courseUUID: faker.random.word(),
        courseName: faker.random.word(),
        courseDescription: faker.random.word(),
        schoolSubject: {
          schoolSubjectUUID: faker.random.word(),
          schoolSubjectName: faker.random.word(),
          schoolSubjectAbbreviation: faker.random.word(),
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        },
        courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        creator: {
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        },
        canEdit: faker.datatype.boolean(),
        courseUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        courseClasses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
      departments: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolJoinCodes: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      schoolSubjects: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        courses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          courseUUID: faker.random.word(),
          courseName: faker.random.word(),
          courseDescription: faker.random.word(),
          schoolSubject: {
            schoolSubjectUUID: faker.random.word(),
            schoolSubjectName: faker.random.word(),
            schoolSubjectAbbreviation: faker.random.word(),
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({})),
          },
          courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          creator: {
            userUUID: faker.random.word(),
            userFirstname: faker.random.word(),
            userLastname: faker.random.word(),
            userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
            userEmail: faker.random.word(),
            userEmailVerified: faker.datatype.boolean(),
            userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            articles: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            courseElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissionGrades: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissions: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schools: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            userSettings: {},
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schoolRoleName: faker.random.word(),
          },
          canEdit: faker.datatype.boolean(),
          courseUsers: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            userUUID: faker.random.word(),
            userFirstname: faker.random.word(),
            userLastname: faker.random.word(),
            userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
            userEmail: faker.random.word(),
            userEmailVerified: faker.datatype.boolean(),
            userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            articles: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            courseElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissionGrades: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissions: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schools: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            userSettings: {},
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schoolRoleName: faker.random.word(),
          })),
          courseClasses: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
          courseGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        })),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
    },
  })),
  schoolSubjects: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    schoolSubjectUUID: faker.random.word(),
    schoolSubjectName: faker.random.word(),
    schoolSubjectAbbreviation: faker.random.word(),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      courseUUID: faker.random.word(),
      courseName: faker.random.word(),
      courseDescription: faker.random.word(),
      school: {
        departments: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        schoolJoinCodes: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        schoolUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        schoolRooms: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          timeTableExamRoomUUID: faker.random.word(),
          schoolRoomName: faker.random.word(),
          schoolRoomAbbreviation: faker.random.word(),
          schoolRoomBuilding: faker.random.word(),
        })),
      },
      schoolSubject: {
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      },
      courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      creator: {
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      },
      canEdit: faker.datatype.boolean(),
      courseUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      courseClasses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
  })),
});

export const getSchoolAdminControllerLeaveSchoolMock = () =>
  faker.datatype.number().toString();

export const getSchoolAdminControllerGetUsersOfSchoolMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    userUUID: faker.random.word(),
    userFirstname: faker.random.word(),
    userLastname: faker.random.word(),
    userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userEmail: faker.random.word(),
    userEmailVerified: faker.datatype.boolean(),
    userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]}Z`,
    articles: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissionGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    fileSubmissions: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schools: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    userSettings: {},
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.random.word()),
    schoolRoleName: faker.random.word(),
  }));

export const getSchoolAdminControllerGetUserPermissionsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({}));

export const getSchoolAdminControllerAddSubjectMock = () => ({
  schoolSubjectUUID: faker.random.word(),
  schoolSubjectName: faker.random.word(),
  schoolSubjectAbbreviation: faker.random.word(),
  courses: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    courseUUID: faker.random.word(),
    courseName: faker.random.word(),
    courseDescription: faker.random.word(),
    school: {
      departments: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolJoinCodes: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      schoolRooms: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        timeTableExamRoomUUID: faker.random.word(),
        schoolRoomName: faker.random.word(),
        schoolRoomAbbreviation: faker.random.word(),
        schoolRoomBuilding: faker.random.word(),
      })),
      schoolSubjects: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
    },
    schoolSubject: {
      schoolSubjectUUID: faker.random.word(),
      schoolSubjectName: faker.random.word(),
      schoolSubjectAbbreviation: faker.random.word(),
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    },
    courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
      }Z`,
    creator: {
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    },
    canEdit: faker.datatype.boolean(),
    courseUsers: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    })),
    courseClasses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
  })),
  timeTableElements: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({})),
});

export const getSchoolAdminControllerUpdateSubjectMock = () => ({
  schoolSubjectUUID: faker.random.word(),
  schoolSubjectName: faker.random.word(),
  schoolSubjectAbbreviation: faker.random.word(),
  courses: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    courseUUID: faker.random.word(),
    courseName: faker.random.word(),
    courseDescription: faker.random.word(),
    school: {
      departments: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolJoinCodes: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      schoolRooms: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        timeTableExamRoomUUID: faker.random.word(),
        schoolRoomName: faker.random.word(),
        schoolRoomAbbreviation: faker.random.word(),
        schoolRoomBuilding: faker.random.word(),
      })),
      schoolSubjects: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
    },
    schoolSubject: {
      schoolSubjectUUID: faker.random.word(),
      schoolSubjectName: faker.random.word(),
      schoolSubjectAbbreviation: faker.random.word(),
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    },
    courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
      }Z`,
    creator: {
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    },
    canEdit: faker.datatype.boolean(),
    courseUsers: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    })),
    courseClasses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
  })),
  timeTableElements: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({})),
});

export const getSchoolAdminControllerGetSubjectMock = () => ({
  schoolSubjectUUID: faker.random.word(),
  schoolSubjectName: faker.random.word(),
  schoolSubjectAbbreviation: faker.random.word(),
  courses: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    courseUUID: faker.random.word(),
    courseName: faker.random.word(),
    courseDescription: faker.random.word(),
    school: {
      departments: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolJoinCodes: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      schoolRooms: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        timeTableExamRoomUUID: faker.random.word(),
        schoolRoomName: faker.random.word(),
        schoolRoomAbbreviation: faker.random.word(),
        schoolRoomBuilding: faker.random.word(),
      })),
      schoolSubjects: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
    },
    schoolSubject: {
      schoolSubjectUUID: faker.random.word(),
      schoolSubjectName: faker.random.word(),
      schoolSubjectAbbreviation: faker.random.word(),
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    },
    courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
      }Z`,
    creator: {
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    },
    canEdit: faker.datatype.boolean(),
    courseUsers: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    })),
    courseClasses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    courseGrades: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
  })),
  timeTableElements: Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({})),
});

export const getSchoolAdminControllerRemoveSubjectMock = () =>
  faker.datatype.number().toString();

export const getSchoolAdminControllerGetSubjectsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    schoolSubjectUUID: faker.random.word(),
    schoolSubjectName: faker.random.word(),
    schoolSubjectAbbreviation: faker.random.word(),
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      courseUUID: faker.random.word(),
      courseName: faker.random.word(),
      courseDescription: faker.random.word(),
      school: {
        departments: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        schoolJoinCodes: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        schoolUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        schoolRooms: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          timeTableExamRoomUUID: faker.random.word(),
          schoolRoomName: faker.random.word(),
          schoolRoomAbbreviation: faker.random.word(),
          schoolRoomBuilding: faker.random.word(),
        })),
        schoolSubjects: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          schoolSubjectUUID: faker.random.word(),
          schoolSubjectName: faker.random.word(),
          schoolSubjectAbbreviation: faker.random.word(),
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        })),
      },
      schoolSubject: {
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      },
      courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      creator: {
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      },
      canEdit: faker.datatype.boolean(),
      courseUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      courseClasses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
    timeTableElements: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
  }));

export const getSchoolAdminControllerGetRoomMock = () => ({
  timeTableExamRoomUUID: faker.random.word(),
  schoolRoomName: faker.random.word(),
  schoolRoomAbbreviation: faker.random.word(),
  schoolRoomBuilding: faker.random.word(),
  school: {
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      courseUUID: faker.random.word(),
      courseName: faker.random.word(),
      courseDescription: faker.random.word(),
      schoolSubject: {
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      },
      courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      creator: {
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      },
      canEdit: faker.datatype.boolean(),
      courseUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      courseClasses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
    departments: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    schoolJoinCodes: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    schoolUsers: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    })),
    schoolRooms: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      timeTableExamRoomUUID: faker.random.word(),
      schoolRoomName: faker.random.word(),
      schoolRoomAbbreviation: faker.random.word(),
      schoolRoomBuilding: faker.random.word(),
    })),
    schoolSubjects: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      schoolSubjectUUID: faker.random.word(),
      schoolSubjectName: faker.random.word(),
      schoolSubjectAbbreviation: faker.random.word(),
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        courseUUID: faker.random.word(),
        courseName: faker.random.word(),
        courseDescription: faker.random.word(),
        schoolSubject: {
          schoolSubjectUUID: faker.random.word(),
          schoolSubjectName: faker.random.word(),
          schoolSubjectAbbreviation: faker.random.word(),
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        },
        courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        creator: {
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        },
        canEdit: faker.datatype.boolean(),
        courseUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        courseClasses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
  },
});

export const getSchoolAdminControllerRemoveRoomMock = () =>
  faker.datatype.number().toString();

export const getSchoolAdminControllerGetRoomsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    timeTableExamRoomUUID: faker.random.word(),
    schoolRoomName: faker.random.word(),
    schoolRoomAbbreviation: faker.random.word(),
    schoolRoomBuilding: faker.random.word(),
    school: {
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        courseUUID: faker.random.word(),
        courseName: faker.random.word(),
        courseDescription: faker.random.word(),
        schoolSubject: {
          schoolSubjectUUID: faker.random.word(),
          schoolSubjectName: faker.random.word(),
          schoolSubjectAbbreviation: faker.random.word(),
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        },
        courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        creator: {
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        },
        canEdit: faker.datatype.boolean(),
        courseUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        courseClasses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
      departments: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolJoinCodes: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      schoolUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      schoolRooms: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        timeTableExamRoomUUID: faker.random.word(),
        schoolRoomName: faker.random.word(),
        schoolRoomAbbreviation: faker.random.word(),
        schoolRoomBuilding: faker.random.word(),
      })),
      schoolSubjects: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        courses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          courseUUID: faker.random.word(),
          courseName: faker.random.word(),
          courseDescription: faker.random.word(),
          schoolSubject: {
            schoolSubjectUUID: faker.random.word(),
            schoolSubjectName: faker.random.word(),
            schoolSubjectAbbreviation: faker.random.word(),
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => ({})),
          },
          courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          creator: {
            userUUID: faker.random.word(),
            userFirstname: faker.random.word(),
            userLastname: faker.random.word(),
            userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
            userEmail: faker.random.word(),
            userEmailVerified: faker.datatype.boolean(),
            userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            articles: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            courseElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissionGrades: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissions: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schools: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            userSettings: {},
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schoolRoleName: faker.random.word(),
          },
          canEdit: faker.datatype.boolean(),
          courseUsers: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({
            userUUID: faker.random.word(),
            userFirstname: faker.random.word(),
            userLastname: faker.random.word(),
            userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
            userEmail: faker.random.word(),
            userEmailVerified: faker.datatype.boolean(),
            userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
              }Z`,
            articles: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            courseElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissionGrades: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            fileSubmissions: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schools: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            userSettings: {},
            timeTableElements: Array.from(
              { length: faker.datatype.number({ min: 1, max: 10 }) },
              (_, i) => i + 1
            ).map(() => faker.random.word()),
            schoolRoleName: faker.random.word(),
          })),
          courseClasses: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
          courseGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        })),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
    },
  }));

export const getSchoolAdminControllerAddRoomMock = () => ({
  timeTableExamRoomUUID: faker.random.word(),
  schoolRoomName: faker.random.word(),
  schoolRoomAbbreviation: faker.random.word(),
  schoolRoomBuilding: faker.random.word(),
  school: {
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      courseUUID: faker.random.word(),
      courseName: faker.random.word(),
      courseDescription: faker.random.word(),
      schoolSubject: {
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      },
      courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      creator: {
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      },
      canEdit: faker.datatype.boolean(),
      courseUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      courseClasses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
    departments: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    schoolJoinCodes: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    schoolUsers: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    })),
    schoolRooms: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      timeTableExamRoomUUID: faker.random.word(),
      schoolRoomName: faker.random.word(),
      schoolRoomAbbreviation: faker.random.word(),
      schoolRoomBuilding: faker.random.word(),
    })),
    schoolSubjects: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      schoolSubjectUUID: faker.random.word(),
      schoolSubjectName: faker.random.word(),
      schoolSubjectAbbreviation: faker.random.word(),
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        courseUUID: faker.random.word(),
        courseName: faker.random.word(),
        courseDescription: faker.random.word(),
        schoolSubject: {
          schoolSubjectUUID: faker.random.word(),
          schoolSubjectName: faker.random.word(),
          schoolSubjectAbbreviation: faker.random.word(),
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        },
        courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        creator: {
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        },
        canEdit: faker.datatype.boolean(),
        courseUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        courseClasses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
  },
});

export const getSchoolAdminControllerUpdateRoomMock = () => ({
  timeTableExamRoomUUID: faker.random.word(),
  schoolRoomName: faker.random.word(),
  schoolRoomAbbreviation: faker.random.word(),
  schoolRoomBuilding: faker.random.word(),
  school: {
    courses: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      courseUUID: faker.random.word(),
      courseName: faker.random.word(),
      courseDescription: faker.random.word(),
      schoolSubject: {
        schoolSubjectUUID: faker.random.word(),
        schoolSubjectName: faker.random.word(),
        schoolSubjectAbbreviation: faker.random.word(),
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      },
      courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      creator: {
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      },
      canEdit: faker.datatype.boolean(),
      courseUsers: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        userUUID: faker.random.word(),
        userFirstname: faker.random.word(),
        userLastname: faker.random.word(),
        userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
        userEmail: faker.random.word(),
        userEmailVerified: faker.datatype.boolean(),
        userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        articles: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissionGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        fileSubmissions: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schools: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        userSettings: {},
        timeTableElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => faker.random.word()),
        schoolRoleName: faker.random.word(),
      })),
      courseClasses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
      courseGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
    departments: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    schoolJoinCodes: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({})),
    schoolUsers: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      userUUID: faker.random.word(),
      userFirstname: faker.random.word(),
      userLastname: faker.random.word(),
      userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
      userEmail: faker.random.word(),
      userEmailVerified: faker.datatype.boolean(),
      userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
        }Z`,
      articles: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courseElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissionGrades: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      fileSubmissions: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schools: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      userSettings: {},
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.random.word()),
      schoolRoleName: faker.random.word(),
    })),
    schoolRooms: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      timeTableExamRoomUUID: faker.random.word(),
      schoolRoomName: faker.random.word(),
      schoolRoomAbbreviation: faker.random.word(),
      schoolRoomBuilding: faker.random.word(),
    })),
    schoolSubjects: Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      schoolSubjectUUID: faker.random.word(),
      schoolSubjectName: faker.random.word(),
      schoolSubjectAbbreviation: faker.random.word(),
      courses: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({
        courseUUID: faker.random.word(),
        courseName: faker.random.word(),
        courseDescription: faker.random.word(),
        schoolSubject: {
          schoolSubjectUUID: faker.random.word(),
          schoolSubjectName: faker.random.word(),
          schoolSubjectAbbreviation: faker.random.word(),
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => ({})),
        },
        courseCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
          }Z`,
        creator: {
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        },
        canEdit: faker.datatype.boolean(),
        courseUsers: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({
          userUUID: faker.random.word(),
          userFirstname: faker.random.word(),
          userLastname: faker.random.word(),
          userBirthDate: `${faker.date.past().toISOString().split(".")[0]}Z`,
          userEmail: faker.random.word(),
          userEmailVerified: faker.datatype.boolean(),
          userCreationTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          userLastLoginTimestamp: `${faker.date.past().toISOString().split(".")[0]
            }Z`,
          articles: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          courseElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissionGrades: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          fileSubmissions: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schools: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          userSettings: {},
          timeTableElements: Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1
          ).map(() => faker.random.word()),
          schoolRoleName: faker.random.word(),
        })),
        courseClasses: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseElements: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
        courseGrades: Array.from(
          { length: faker.datatype.number({ min: 1, max: 10 }) },
          (_, i) => i + 1
        ).map(() => ({})),
      })),
      timeTableElements: Array.from(
        { length: faker.datatype.number({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => ({})),
    })),
  },
});

export const getSchoolAdminControllerUpdateRoleMock = () => ({});

export const getSchoolAdminMSW = () => [
  rest.post("*/api/schoolAdmin/school", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerAddSchoolConfigMock())
    );
  }),
  rest.post("*/api/schoolAdmin/department", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerAddDepartmentMock())
    );
  }),
  rest.delete("*/api/schoolAdmin/department", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerRemoveDepartmentMock())
    );
  }),
  rest.put("*/api/schoolAdmin/department", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerUpdateDepartmentMock())
    );
  }),
  rest.post("*/api/schoolAdmin/departments", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerAddDepartmentsMock())
    );
  }),
  rest.get("*/api/schoolAdmin/departments/:schoolUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetDepartmentsMock())
    );
  }),
  rest.post("*/api/schoolAdmin/class", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerAddClassMock())
    );
  }),
  rest.delete("*/api/schoolAdmin/class", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerRemoveClassMock())
    );
  }),
  rest.put("*/api/schoolAdmin/class", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerUpdateClassMock())
    );
  }),
  rest.get("*/api/schoolAdmin/classes/:schoolUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetClassesMock())
    );
  }),
  rest.post("*/api/schoolAdmin/class/users", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerAddUsersToClassMock())
    );
  }),
  rest.delete("*/api/schoolAdmin/class/users", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerRemoveUsersFromClassMock())
    );
  }),
  rest.post("*/api/schoolAdmin/joinCode", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerAddJoinCodeMock())
    );
  }),
  rest.delete("*/api/schoolAdmin/joinCode", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerRemoveJoinCodeMock())
    );
  }),
  rest.put("*/api/schoolAdmin/joinCode", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerUpdateJoinCodeMock())
    );
  }),
  rest.get("*/api/schoolAdmin/joinCode/:schoolUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetJoinCodesMock())
    );
  }),
  rest.post("*/api/schoolAdmin/joinSchool", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerJoinSchoolMock())
    );
  }),
  rest.post("*/api/schoolAdmin/leaveSchool", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerLeaveSchoolMock())
    );
  }),
  rest.get("*/api/schoolAdmin/users/:schoolUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetUsersOfSchoolMock())
    );
  }),
  rest.get("*/api/schoolAdmin/permissions/:userUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetUserPermissionsMock())
    );
  }),
  rest.post("*/api/schoolAdmin/subject", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerAddSubjectMock())
    );
  }),
  rest.put("*/api/schoolAdmin/subject", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerUpdateSubjectMock())
    );
  }),
  rest.get("*/api/schoolAdmin/subject/:subjectUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetSubjectMock())
    );
  }),
  rest.delete("*/api/schoolAdmin/subject/:subjectUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerRemoveSubjectMock())
    );
  }),
  rest.get("*/api/schoolAdmin/subjects/:schoolUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetSubjectsMock())
    );
  }),
  rest.get("*/api/schoolAdmin/room/:roomUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetRoomMock())
    );
  }),
  rest.delete("*/api/schoolAdmin/room/:roomUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerRemoveRoomMock())
    );
  }),
  rest.get("*/api/schoolAdmin/rooms/:schoolUUID", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerGetRoomsMock())
    );
  }),
  rest.post("*/api/schoolAdmin/room", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerAddRoomMock())
    );
  }),
  rest.put("*/api/schoolAdmin/room", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerUpdateRoomMock())
    );
  }),
  rest.get("*/api/schoolAdmin/information/:schoolUUID", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get(
    "*/api/schoolAdmin/detailedInformation/:schoolUUID",
    (_req, res, ctx) => {
      return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
    }
  ),
  rest.put("*/api/schoolAdmin/role", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getSchoolAdminControllerUpdateRoleMock())
    );
  }),
];
