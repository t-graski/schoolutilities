/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * SchoolUtilities API
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const userControllerRequestPasswordReset = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/user/requestPasswordReset`, undefined, options);
};

export type UserControllerRequestPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRequestPasswordReset>>
>;

export type UserControllerRequestPasswordResetMutationError =
  AxiosError<unknown>;

export const useUserControllerRequestPasswordReset = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerRequestPasswordReset>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerRequestPasswordReset>>,
    TVariables
  > = () => {
    return userControllerRequestPasswordReset(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof userControllerRequestPasswordReset>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const userControllerPasswordReset = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/user/passwordReset`, undefined, options);
};

export type UserControllerPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerPasswordReset>>
>;

export type UserControllerPasswordResetMutationError = AxiosError<unknown>;

export const useUserControllerPasswordReset = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerPasswordReset>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerPasswordReset>>,
    TVariables
  > = () => {
    return userControllerPasswordReset(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof userControllerPasswordReset>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const userControllerChangePassword = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/user/changePassword`, undefined, options);
};

export type UserControllerChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerChangePassword>>
>;

export type UserControllerChangePasswordMutationError = AxiosError<unknown>;

export const useUserControllerChangePassword = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerChangePassword>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerChangePassword>>,
    TVariables
  > = () => {
    return userControllerChangePassword(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof userControllerChangePassword>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const userControllerRequestEmailChange = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/user/requestEmailChange`, undefined, options);
};

export type UserControllerRequestEmailChangeMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRequestEmailChange>>
>;

export type UserControllerRequestEmailChangeMutationError = AxiosError<unknown>;

export const useUserControllerRequestEmailChange = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerRequestEmailChange>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerRequestEmailChange>>,
    TVariables
  > = () => {
    return userControllerRequestEmailChange(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof userControllerRequestEmailChange>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const userControllerVerifyEmailChange = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(`/api/user/verifyEmailChange`, undefined, options);
};

export type UserControllerVerifyEmailChangeMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerVerifyEmailChange>>
>;

export type UserControllerVerifyEmailChangeMutationError = AxiosError<unknown>;

export const useUserControllerVerifyEmailChange = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerVerifyEmailChange>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerVerifyEmailChange>>,
    TVariables
  > = () => {
    return userControllerVerifyEmailChange(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof userControllerVerifyEmailChange>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const userControllerGetSchools = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/user/getSchools`, options);
};

export const getUserControllerGetSchoolsQueryKey = () => [
  `/api/user/getSchools`,
];

export type UserControllerGetSchoolsQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetSchools>>
>;
export type UserControllerGetSchoolsQueryError = AxiosError<unknown>;

export const useUserControllerGetSchools = <
  TData = Awaited<ReturnType<typeof userControllerGetSchools>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetSchools>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetSchoolsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetSchools>>
  > = ({ signal }) => userControllerGetSchools({ signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof userControllerGetSchools>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const userControllerGetProfile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/user/profile`, options);
};

export const getUserControllerGetProfileQueryKey = () => [`/api/user/profile`];

export type UserControllerGetProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetProfile>>
>;
export type UserControllerGetProfileQueryError = AxiosError<unknown>;

export const useUserControllerGetProfile = <
  TData = Awaited<ReturnType<typeof userControllerGetProfile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetProfile>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetProfile>>
  > = ({ signal }) => userControllerGetProfile({ signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof userControllerGetProfile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const userControllerGetPublicProfile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/api/user/publicProfile`, options);
};

export const getUserControllerGetPublicProfileQueryKey = () => [
  `/api/user/publicProfile`,
];

export type UserControllerGetPublicProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetPublicProfile>>
>;
export type UserControllerGetPublicProfileQueryError = AxiosError<unknown>;

export const useUserControllerGetPublicProfile = <
  TData = Awaited<ReturnType<typeof userControllerGetPublicProfile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetPublicProfile>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetPublicProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetPublicProfile>>
  > = ({ signal }) =>
    userControllerGetPublicProfile({ signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof userControllerGetPublicProfile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const userControllerUpdateUserSettings = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/api/user/updateUserSettings`, undefined, options);
};

export type UserControllerUpdateUserSettingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdateUserSettings>>
>;

export type UserControllerUpdateUserSettingsMutationError = AxiosError<unknown>;

export const useUserControllerUpdateUserSettings = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdateUserSettings>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUpdateUserSettings>>,
    TVariables
  > = () => {
    return userControllerUpdateUserSettings(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof userControllerUpdateUserSettings>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const userControllerUpdateAppearance = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/api/user/updateAppearance`, undefined, options);
};

export type UserControllerUpdateAppearanceMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdateAppearance>>
>;

export type UserControllerUpdateAppearanceMutationError = AxiosError<unknown>;

export const useUserControllerUpdateAppearance = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdateAppearance>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUpdateAppearance>>,
    TVariables
  > = () => {
    return userControllerUpdateAppearance(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof userControllerUpdateAppearance>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
export const userControllerUpdatePublicProfile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.put(`/api/user/updatePublicProfile`, undefined, options);
};

export type UserControllerUpdatePublicProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdatePublicProfile>>
>;

export type UserControllerUpdatePublicProfileMutationError =
  AxiosError<unknown>;

export const useUserControllerUpdatePublicProfile = <
  TError = AxiosError<unknown>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUpdatePublicProfile>>,
    TError,
    TVariables,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUpdatePublicProfile>>,
    TVariables
  > = () => {
    return userControllerUpdatePublicProfile(axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof userControllerUpdatePublicProfile>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};
